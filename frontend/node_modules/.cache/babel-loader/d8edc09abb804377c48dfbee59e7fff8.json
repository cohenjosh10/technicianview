{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jhcohen/Desktop/technicianview/frontend/src/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nvar TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nvar GREENTOWN_LABS_LNG = -71.102768;\nvar GREENTOWN_LABS_LAT = 42.381729;\nvar SERVER_REFRESH_MS = 1000;\nvar APPLICATION_START_TIME_MS = new Date().getTime();\nvar MOCK_DATA_START_TIME_S = 1592078400;\nvar MOCK_DATA_SIMULATION_SPEED = 20;\nvar MS_IN_S = 1000;\nvar mGlobalTechDict = {};\nvar mMap = new mapboxgl.Map({\n  container: mapContainer.current,\n  style: 'mapbox://styles/mapbox/streets-v11',\n  center: [centerLng, centerLat],\n  zoom: 12\n});\n\nvar getMockedTime = function getMockedTime() {\n  return MOCK_DATA_START_TIME_S + Math.round((new Date().getTime() - APPLICATION_START_TIME_MS) / MS_IN_S) * MOCK_DATA_SIMULATION_SPEED;\n};\n\nvar Map = function Map() {\n  _s();\n\n  var mapContainer = useRef();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tsecs = _useState2[0],\n      setTsecs = _useState2[1]; // Technician Fetching\n\n\n  var fetchTechnicianLocation = function fetchTechnicianLocation() {\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var tsecs;\n\n      var _iterator = _createForOfIteratorHelper(json.features),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tech = _step.value;\n          var name = tech.properties.name;\n\n          if (mGlobalTechDict[name] == null) {\n            tech.properties.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n            mGlobalTechDict[name] = tech;\n          } else {\n            tech.properties.color = mGlobalTechDict[name].properties.color;\n            mGlobalTechDict[name] = tech;\n          }\n\n          tsecs = tech.properties.tsecs;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      setTsecs(tsecs);\n      scheduleTechnicianFetch();\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  var scheduleTechnicianFetch = function scheduleTechnicianFetch() {\n    setTimeout(function () {\n      fetchTechnicianLocation();\n    }, SERVER_REFRESH_MS);\n  };\n\n  fetchTechnicianLocation();\n  useEffect(function () {\n    var techs = Object.values(mGlobalTechDict); // Set screen center to the average of the existing technicians. If no\n    // technicians are provided, set screen center to the Greentown Labs\n\n    var latSum = 0;\n    var lngSum = 0;\n\n    for (var _i = 0, _techs = techs; _i < _techs.length; _i++) {\n      var tech = _techs[_i];\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n\n    var centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    var centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT;\n    var map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [centerLng, centerLat],\n      zoom: 12\n    });\n\n    for (var _i2 = 0, _techs2 = techs; _i2 < _techs2.length; _i2++) {\n      var _tech = _techs2[_i2];\n      var marker = new mapboxgl.Marker({\n        color: _tech.properties.color\n      }).setLngLat([_tech.geometry.coordinates[0], _tech.geometry.coordinates[1]]).setPopup(new mapboxgl.Popup().setText(_tech.properties.name)).setRotation(_tech.properties.bearing).addTo(map);\n    }\n  }, [tsecs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Map, \"L6nhg6Zu0JCWs25lkATZIy+QD/Y=\");\n\n_c = Map;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 106,\n  columnNumber: 17\n}, this), document.getElementById('app'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jhcohen/Desktop/technicianview/frontend/src/index.js"],"names":["React","useRef","useEffect","useState","ReactDOM","mapboxgl","MapboxWorker","workerClass","accessToken","TECHNICIANS_API","GREENTOWN_LABS_LNG","GREENTOWN_LABS_LAT","SERVER_REFRESH_MS","APPLICATION_START_TIME_MS","Date","getTime","MOCK_DATA_START_TIME_S","MOCK_DATA_SIMULATION_SPEED","MS_IN_S","mGlobalTechDict","mMap","Map","container","mapContainer","current","style","center","centerLng","centerLat","zoom","getMockedTime","Math","round","tsecs","setTsecs","fetchTechnicianLocation","mockedTime","fetch","then","response","json","features","tech","name","properties","color","floor","random","toString","scheduleTechnicianFetch","catch","error","console","setTimeout","techs","Object","values","latSum","lngSum","geometry","coordinates","length","map","marker","Marker","setLngLat","setPopup","Popup","setText","setRotation","bearing","addTo","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\n\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nconst TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nconst GREENTOWN_LABS_LNG = -71.102768;\nconst GREENTOWN_LABS_LAT = 42.381729;\nconst SERVER_REFRESH_MS = 1000;\n\nconst APPLICATION_START_TIME_MS = new Date().getTime();\nconst MOCK_DATA_START_TIME_S = 1592078400;\nconst MOCK_DATA_SIMULATION_SPEED = 20;\nconst MS_IN_S = 1000;\n\nconst mGlobalTechDict = {};\nconst mMap = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [centerLng, centerLat],\n      zoom: 12\n    });\n\nconst getMockedTime = () => {\n  return MOCK_DATA_START_TIME_S + Math.round((new Date().getTime() - APPLICATION_START_TIME_MS) / MS_IN_S) * MOCK_DATA_SIMULATION_SPEED;\n}\n\nconst Map = () => {\n  const mapContainer = useRef();\n  const [tsecs, setTsecs] = useState(0);\n\n  // Technician Fetching\n  const fetchTechnicianLocation = () => {\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime)\n      .then((response) => response.json())\n      .then((json) => {\n        var tsecs;\n        for (const tech of json.features) {\n          const name = tech.properties.name;\n          if (mGlobalTechDict[name] == null) {\n            tech.properties.color = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n            mGlobalTechDict[name] = tech;\n          } else {\n            tech.properties.color = mGlobalTechDict[name].properties.color;\n            mGlobalTechDict[name] = tech;\n          }\n          tsecs = tech.properties.tsecs;\n        }\n        setTsecs(tsecs);\n        scheduleTechnicianFetch();\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    };\n\n  const scheduleTechnicianFetch = () => {\n    setTimeout(() => {\n      fetchTechnicianLocation();\n    }, SERVER_REFRESH_MS);\n  }\n\n  fetchTechnicianLocation();\n\n  useEffect(() => {\n    const techs = Object.values(mGlobalTechDict);\n\n    // Set screen center to the average of the existing technicians. If no\n    // technicians are provided, set screen center to the Greentown Labs\n    var latSum = 0;\n    var lngSum = 0;\n    for (const tech of techs) {\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n    const centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    const centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT;\n\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [centerLng, centerLat],\n      zoom: 12\n    });\n\n    for (const tech of techs) {\n      const marker = new mapboxgl.Marker({color: tech.properties.color})\n        .setLngLat([tech.geometry.coordinates[0], tech.geometry.coordinates[1]])\n        .setPopup(new mapboxgl.Popup().setText(tech.properties.name))\n        .setRotation(tech.properties.bearing)\n        .addTo(map);\n    }\n  }, [tsecs]);\n\n  return (\n    <div>\n      <div className=\"map-container\" ref={mapContainer} />\n    </div>\n  );\n};\n\nReactDOM.render(<Map />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}