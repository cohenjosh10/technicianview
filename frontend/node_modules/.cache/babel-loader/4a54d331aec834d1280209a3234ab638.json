{"ast":null,"code":"import _slicedToArray from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jhcohen/Desktop/technicianview/frontend/src/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nvar TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nvar GREENTOWN_LABS_LNG = -71.102768;\nvar GREENTOWN_LABS_LAT = 42.381729;\n\nvar Map = function Map() {\n  _s();\n\n  var mapContainer = useRef();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      techDict = _useState2[0],\n      setTechDict = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      snapshotTs = _useState4[0],\n      setSnapshotTs = _useState4[1]; // Technician Information\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      techLng = _useState6[0],\n      setTechLng = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      techLat = _useState8[0],\n      setTechLat = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      techTitle = _useState10[0],\n      setTechTitle = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      techRot = _useState12[0],\n      setTechRot = _useState12[1];\n\n  var _useState13 = useState(\"#\" + Math.floor(Math.random() * 16777215).toString(16)),\n      _useState14 = _slicedToArray(_useState13, 2),\n      techColor = _useState14[0],\n      setTechColor = _useState14[1]; // Each tech's properties include a map from name -> full json, with a color\n  // added to properties list.\n  // Technician Fetching\n\n\n  var fetchTechnicianLocation = function fetchTechnicianLocation() {\n    return fetch(TECHNICIANS_API).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var newTechDict = {};\n      var isNewSnapshot = false;\n\n      for (var tech in Object.values(json.features)) {\n        var name = tech.properties.name;\n\n        if (techDict[name] !== null) {\n          tech.properties.color = techDict[name].properties.color;\n\n          if (tech.properties.tsecs != techDict[name].properties.tsecs) {\n            isNewSnapshot = true;\n          }\n        } else {\n          tech.properties.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n        }\n\n        newTechDict[name] = tech;\n      }\n\n      if (isNewSnapshot) {\n        setTechDict(newTechDict);\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  useEffect(function () {\n    fetchTechnicianLocation();\n    var techs = techDict != null ? Object.values(techDict) : []; // Set screen center to the average of the existing technicians. If no\n    // technicians are provided, set screen center to the Greentown Labs\n\n    var latSum = 0;\n    var lngSum = 0;\n\n    for (var tech in techs) {\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n\n    var centerLng = techs.size > 0 ? lngSum / techs.size : GREENTOWN_LABS_LNG;\n    var centerLat = techs.size > 0 ? lngSum / techs.size : GREENTOWN_LABS_LAT;\n    var map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [centerLng, centerLat],\n      zoom: 9\n    });\n\n    for (var _tech in techs) {\n      var marker = new mapboxgl.Marker({\n        color: _tech.properties.color\n      }).setLngLat([_tech.geometry.coordinates[0], _tech.geometry.coordinates[1]]).setPopup(new mapboxgl.Popup().setText(_tech.properties.name)).setRotation(_tech.properities.bearing).addTo(map);\n    }\n\n    return function () {\n      return map.remove();\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Map, \"+t4O0oKXoT9PBTs5kg/AxzYiaSk=\");\n\n_c = Map;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 99,\n  columnNumber: 17\n}, this), document.getElementById('app'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jhcohen/Desktop/technicianview/frontend/src/index.js"],"names":["React","useRef","useEffect","useState","ReactDOM","mapboxgl","MapboxWorker","workerClass","accessToken","TECHNICIANS_API","GREENTOWN_LABS_LNG","GREENTOWN_LABS_LAT","Map","mapContainer","techDict","setTechDict","snapshotTs","setSnapshotTs","techLng","setTechLng","techLat","setTechLat","techTitle","setTechTitle","techRot","setTechRot","Math","floor","random","toString","techColor","setTechColor","fetchTechnicianLocation","fetch","then","response","json","newTechDict","isNewSnapshot","tech","Object","values","features","name","properties","color","tsecs","catch","error","console","techs","latSum","lngSum","geometry","coordinates","centerLng","size","centerLat","map","container","current","style","center","zoom","marker","Marker","setLngLat","setPopup","Popup","setText","setRotation","properities","bearing","addTo","remove","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\n\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nconst TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nconst GREENTOWN_LABS_LNG = -71.102768;\nconst GREENTOWN_LABS_LAT = 42.381729;\n\nconst Map = () => {\n  const mapContainer = useRef();\n  const [techDict, setTechDict] = useState(null);\n  const [snapshotTs, setSnapshotTs] = useState(0);\n\n  // Technician Information\n \n  const [techLng, setTechLng] = useState(0);\n  const [techLat, setTechLat] = useState(0);\n  const [techTitle, setTechTitle] = useState(\"\");\n  const [techRot, setTechRot] = useState(0);\n  const [techColor, setTechColor] = useState(\"#\" + Math.floor(Math.random()*16777215).toString(16));\n\n  // Each tech's properties include a map from name -> full json, with a color\n  // added to properties list.\n\n\n  // Technician Fetching\n  const fetchTechnicianLocation = () => {\n    return fetch(TECHNICIANS_API)\n      .then((response) => response.json())\n      .then((json) => {\n        const newTechDict = {};\n        var isNewSnapshot = false;\n        for (const tech in Object.values(json.features)) {\n          const name = tech.properties.name;\n          if (techDict[name] !== null) {\n            tech.properties.color = techDict[name].properties.color;\n            if (tech.properties.tsecs != techDict[name].properties.tsecs) {\n              isNewSnapshot = true;\n            }\n          } else {\n            tech.properties.color = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n          }\n          newTechDict[name] = tech;\n        }\n        if (isNewSnapshot) {\n          setTechDict(newTechDict);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    };\n\n  useEffect(() => {\n    fetchTechnicianLocation();\n\n    const techs = techDict != null ? Object.values(techDict) : [];\n\n    // Set screen center to the average of the existing technicians. If no\n    // technicians are provided, set screen center to the Greentown Labs\n    var latSum = 0;\n    var lngSum = 0;\n    for (const tech in techs) {\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n    const centerLng = techs.size > 0 ? lngSum / techs.size : GREENTOWN_LABS_LNG;\n    const centerLat = techs.size > 0 ? lngSum / techs.size : GREENTOWN_LABS_LAT;\n\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [centerLng, centerLat],\n      zoom: 9\n    });\n\n    for (const tech in techs) {\n      const marker = new mapboxgl.Marker({color: tech.properties.color})\n        .setLngLat([tech.geometry.coordinates[0], tech.geometry.coordinates[1]])\n        .setPopup(new mapboxgl.Popup().setText(tech.properties.name))\n        .setRotation(tech.properities.bearing)\n        .addTo(map);\n    }\n\n    return () => map.remove();\n  });\n\n  return (\n    <div>\n      <div className=\"map-container\" ref={mapContainer} />\n    </div>\n  );\n};\n\nReactDOM.render(<Map />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}