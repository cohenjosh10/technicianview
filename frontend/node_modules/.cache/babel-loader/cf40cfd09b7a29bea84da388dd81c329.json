{"ast":null,"code":"import _slicedToArray from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _jsxFileName = \"/Users/jhcohen/Desktop/technicianview/frontend/src/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { toast } from 'react-toastify';\nimport haversine from 'haversine-distance';\nimport 'react-toastify/dist/ReactToastify.css';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'; // Mapbox Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg'; // Standard Application Settings\n\nvar GREENTOWN_LABS_LNG = -71.102768;\nvar GREENTOWN_LABS_LAT = 42.381729;\nvar SERVER_REFRESH_MS = 500;\nvar CLOSE_PROXIMITY_M = 304.8;\nvar MS_IN_S = 1000; // Settings to allow for easy demo\n\nvar TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nvar APPLICATION_START_TIME_MS = new Date().getTime();\nvar MOCK_DATA_START_TIME_S = 1592078400;\nvar MOCK_DATA_SIMULATION_SPEED = 60;\n/**\n * Helper method to provide a \"mocked\" time for our application, which allows \n * us to run our webapp with mocked data.\n */\n\nvar getMockedTime = function getMockedTime() {\n  return MOCK_DATA_START_TIME_S + Math.round((new Date().getTime() - APPLICATION_START_TIME_MS) / MS_IN_S) * MOCK_DATA_SIMULATION_SPEED;\n};\n\nvar Map = function Map() {\n  _s();\n\n  ////////////////////////////////////////////////////////\n  //       Component Util Methods                       //\n  ////////////////////////////////////////////////////////\n\n  /** Method to fetch the location of all technicians on a recurring basis */\n  var fetchTechnicianLocation = function fetchTechnicianLocation() {\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      parseTechnicianData(json);\n      scheduleTechnicianFetch();\n    }).catch(function (error) {\n      console.error(error);\n      scheduleTechnicianFetch();\n    });\n  };\n  /**\n   * Helper method to parse technician data, write it to state, and \n   * and trigger an application UI update if necessary\n   */\n\n\n  var parseTechnicianData = function parseTechnicianData(json) {\n    var tsecs;\n\n    var _iterator = _createForOfIteratorHelper(json.features),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var tech = _step.value;\n        var name = tech.properties.name;\n\n        if (technicianData[name] == null) {\n          tech.properties.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n          technicianData[name] = tech;\n        } else {\n          tech.properties.color = technicianData[name].properties.color;\n          technicianData[name] = tech;\n        }\n\n        tsecs = tech.properties.tsecs;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    setTsecs(tsecs);\n    notifyIfTechniciansAreClose(tsecs);\n  };\n  /** Helper method to trigger a technician fetch if necessary. */\n\n\n  var scheduleTechnicianFetch = function scheduleTechnicianFetch() {\n    setTimeout(function () {\n      fetchTechnicianLocation();\n    }, SERVER_REFRESH_MS);\n  };\n  /**\n   * Method which triggers a toast whenever two technicians go from a\n   * state where they not in close proximity to a state where they are\n   * in close proximity.\n   */\n\n\n  var notifyIfTechniciansAreClose = function notifyIfTechniciansAreClose(tsecs) {\n    var technicianPairs = generateTechnicianPairs();\n\n    var _iterator2 = _createForOfIteratorHelper(technicianPairs),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var technicianPair = _step2.value;\n        var id = getTechnicianPairUniqueId(technicianPair);\n        var technicianOne = technicianPair[0];\n        var technicianTwo = technicianPair[1];\n        var technicianOneCoords = {\n          'latitude': technicianOne.geometry.coordinates[1],\n          'longitude': technicianOne.geometry.coordinates[0]\n        };\n        var technicianTwoCoords = {\n          'latitude': technicianTwo.geometry.coordinates[1],\n          'longitude': technicianTwo.geometry.coordinates[0]\n        };\n\n        if (haversine(technicianOneCoords, technicianTwoCoords) < CLOSE_PROXIMITY_M) {\n          if (!closeTechnicianPairs.has(id)) {\n            toast('[ALERT] ' + technicianOne.properties.name + ' is within 1000 feet of ' + technicianTwo.properties.name + '!');\n            closeTechnicianPairs.add(id);\n          }\n        } else {\n          if (closeTechnicianPairs.has(id)) {\n            closeTechnicianPairs.add(id);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n\n  var generateTechnicianPairs = function generateTechnicianPairs() {\n    var technicians = Object.values(technicianData);\n    var technicianPairs = [];\n\n    for (var i = 0; i < technicians.length; i++) {\n      for (var j = i + 1; j < technicians.length; j++) {\n        technicianPairs.push([technicians[i], technicians[j]]);\n      }\n    }\n\n    return technicianPairs;\n  };\n\n  var getTechnicianPairUniqueId = function getTechnicianPairUniqueId(technicianPair) {\n    return technicianPair[0].properties.name + technicianPair[1].properties.name;\n  };\n\n  useEffect(function () {\n    var techs = Object.values(technicianData); // Calculate a screen center to be the average of the existing technicians. \n    // If no technicians are provided, set screen center to the Greentown Labs\n\n    var latSum = 0;\n    var lngSum = 0;\n\n    for (var _i = 0, _techs = techs; _i < _techs.length; _i++) {\n      var tech = _techs[_i];\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n\n    var centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    var centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT; // Render the map\n\n    if (map == null) {\n      setMap(new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [centerLng, centerLat],\n        zoom: 12\n      }));\n    } else {\n      map.setCenter([centerLng, centerLat]);\n    } // Render the map markers\n\n\n    for (var _i2 = 0, _techs2 = techs; _i2 < _techs2.length; _i2++) {\n      var _tech = _techs2[_i2];\n      var name = _tech.properties.name;\n\n      if (markers[name] == null) {\n        markers[name] = new mapboxgl.Marker({\n          color: _tech.properties.color\n        }).setLngLat([_tech.geometry.coordinates[0], _tech.geometry.coordinates[1]]).setPopup(new mapboxgl.Popup().setText(_tech.properties.name)).setRotation(_tech.properties.bearing).addTo(map);\n      } else {\n        markers[name].setLngLat([_tech.geometry.coordinates[0], _tech.geometry.coordinates[1]]).setPopup(new mapboxgl.Popup().setText(_tech.properties.name)).setRotation(_tech.properties.bearing).addTo(map);\n      }\n    }\n  }, [tsecs]); ////////////////////////////////////////////////////////\n  //       Initialize Component                         //\n  //////////////////////////////////////////////////////// \n  // Initialize Component State\n\n  var mapContainer = useRef();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tsecs = _useState2[0],\n      setTsecs = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      technicianData = _useState4[0],\n      setTechnicianData = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      markers = _useState6[0],\n      setMarkers = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      map = _useState8[0],\n      setMap = _useState8[1];\n\n  var _useState9 = useState(new Set()),\n      _useState10 = _slicedToArray(_useState9, 2),\n      closeTechnicianPairs = _useState10[0],\n      setCloseTechnicianPairs = _useState10[1];\n\n  toast.configure();\n  fetchTechnicianLocation();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Map, \"p/FG1TQLADMfdHx/p4SlUUXC5fA=\");\n\n_c = Map;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 206,\n  columnNumber: 17\n}, this), document.getElementById('app'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jhcohen/Desktop/technicianview/frontend/src/index.js"],"names":["React","useRef","useEffect","useState","ReactDOM","toast","haversine","mapboxgl","MapboxWorker","workerClass","accessToken","GREENTOWN_LABS_LNG","GREENTOWN_LABS_LAT","SERVER_REFRESH_MS","CLOSE_PROXIMITY_M","MS_IN_S","TECHNICIANS_API","APPLICATION_START_TIME_MS","Date","getTime","MOCK_DATA_START_TIME_S","MOCK_DATA_SIMULATION_SPEED","getMockedTime","Math","round","Map","fetchTechnicianLocation","mockedTime","fetch","then","response","json","parseTechnicianData","scheduleTechnicianFetch","catch","error","console","tsecs","features","tech","name","properties","technicianData","color","floor","random","toString","setTsecs","notifyIfTechniciansAreClose","setTimeout","technicianPairs","generateTechnicianPairs","technicianPair","id","getTechnicianPairUniqueId","technicianOne","technicianTwo","technicianOneCoords","geometry","coordinates","technicianTwoCoords","closeTechnicianPairs","has","add","technicians","Object","values","i","length","j","push","techs","latSum","lngSum","centerLng","centerLat","map","setMap","container","mapContainer","current","style","center","zoom","setCenter","markers","Marker","setLngLat","setPopup","Popup","setText","setRotation","bearing","addTo","setTechnicianData","setMarkers","Set","setCloseTechnicianPairs","configure","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {toast} from 'react-toastify';\nimport haversine from 'haversine-distance';\nimport 'react-toastify/dist/ReactToastify.css';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\n\n// Mapbox Constants\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\n\n// Standard Application Settings\nconst GREENTOWN_LABS_LNG = -71.102768;\nconst GREENTOWN_LABS_LAT = 42.381729;\nconst SERVER_REFRESH_MS = 500;\nconst CLOSE_PROXIMITY_M = 304.8\nconst MS_IN_S = 1000;\n\n// Settings to allow for easy demo\nconst TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nconst APPLICATION_START_TIME_MS = new Date().getTime();\nconst MOCK_DATA_START_TIME_S = 1592078400;\nconst MOCK_DATA_SIMULATION_SPEED = 60;\n\n/**\n * Helper method to provide a \"mocked\" time for our application, which allows \n * us to run our webapp with mocked data.\n */\nconst getMockedTime = () => {\n  return MOCK_DATA_START_TIME_S\n    + Math.round((new Date().getTime() - APPLICATION_START_TIME_MS) / MS_IN_S)\n    * MOCK_DATA_SIMULATION_SPEED;\n}\n\nconst Map = () => {\n\n  ////////////////////////////////////////////////////////\n  //       Component Util Methods                       //\n  ////////////////////////////////////////////////////////\n    \n  /** Method to fetch the location of all technicians on a recurring basis */\n  const fetchTechnicianLocation = () => {\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime)\n      .then((response) => response.json())\n      .then((json) => {\n        parseTechnicianData(json);\n        scheduleTechnicianFetch();\n      })\n      .catch((error) => {\n        console.error(error);\n        scheduleTechnicianFetch();\n      });\n    };\n\n  /**\n   * Helper method to parse technician data, write it to state, and \n   * and trigger an application UI update if necessary\n   */\n  const parseTechnicianData = (json) => {\n    var tsecs;\n    for (const tech of json.features) {\n      const name = tech.properties.name;\n      if (technicianData[name] == null) {\n        tech.properties.color = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n        technicianData[name] = tech;\n      } else {\n        tech.properties.color = technicianData[name].properties.color;\n        technicianData[name] = tech;\n      }\n      tsecs = tech.properties.tsecs;\n    }\n    setTsecs(tsecs);\n    notifyIfTechniciansAreClose(tsecs);\n  }\n\n  /** Helper method to trigger a technician fetch if necessary. */\n  const scheduleTechnicianFetch = () => {\n    setTimeout(() => {\n      fetchTechnicianLocation();\n    }, SERVER_REFRESH_MS);\n  }\n\n  /**\n   * Method which triggers a toast whenever two technicians go from a\n   * state where they not in close proximity to a state where they are\n   * in close proximity.\n   */\n  const notifyIfTechniciansAreClose = (tsecs) => {\n    const technicianPairs = generateTechnicianPairs();\n    for (const technicianPair of technicianPairs) {\n      const id = getTechnicianPairUniqueId(technicianPair);\n      const technicianOne = technicianPair[0];\n      const technicianTwo = technicianPair[1];\n      const technicianOneCoords =\n        {\n          'latitude' : technicianOne.geometry.coordinates[1],\n          'longitude' : technicianOne.geometry.coordinates[0]\n        };\n      const technicianTwoCoords = \n        {\n          'latitude' : technicianTwo.geometry.coordinates[1],\n          'longitude' : technicianTwo.geometry.coordinates[0]\n        };\n\n      if (haversine(technicianOneCoords, technicianTwoCoords) < CLOSE_PROXIMITY_M) {\n        if (!closeTechnicianPairs.has(id)) {\n          toast('[ALERT] ' + technicianOne.properties.name + ' is within 1000 feet of ' + technicianTwo.properties.name + '!');\n          closeTechnicianPairs.add(id);\n        } \n      } else {\n        if (closeTechnicianPairs.has(id)) {\n          closeTechnicianPairs.add(id);\n        }\n      }\n    }\n  }\n\n  const generateTechnicianPairs = () => {\n    const technicians = Object.values(technicianData);\n    const technicianPairs = [];\n    for (var i = 0; i < technicians.length; i++) {\n      for (var j = i+1; j < technicians.length; j++) {\n        technicianPairs.push([technicians[i], technicians[j]]);\n      }\n    }\n    return technicianPairs;\n  }\n\n  const getTechnicianPairUniqueId = (technicianPair) => {\n    return technicianPair[0].properties.name + technicianPair[1].properties.name;\n  }\n\n\n\n  useEffect(() => {\n    const techs = Object.values(technicianData);\n\n    // Calculate a screen center to be the average of the existing technicians. \n    // If no technicians are provided, set screen center to the Greentown Labs\n    var latSum = 0;\n    var lngSum = 0;\n    for (const tech of techs) {\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n    const centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    const centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT;\n\n    // Render the map\n    if (map == null) {\n      setMap(new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [centerLng, centerLat],\n        zoom: 12\n      }));\n    } else {\n      map.setCenter([centerLng, centerLat]);\n    }\n\n    // Render the map markers\n    for (const tech of techs) {\n      var name = tech.properties.name;\n      if (markers[name] == null) {\n        markers[name] = new mapboxgl.Marker({color: tech.properties.color})\n          .setLngLat([tech.geometry.coordinates[0], tech.geometry.coordinates[1]])\n          .setPopup(new mapboxgl.Popup().setText(tech.properties.name))\n          .setRotation(tech.properties.bearing)\n          .addTo(map);\n      } else {\n        markers[name]\n          .setLngLat([tech.geometry.coordinates[0], tech.geometry.coordinates[1]])\n          .setPopup(new mapboxgl.Popup().setText(tech.properties.name))\n          .setRotation(tech.properties.bearing)\n          .addTo(map);\n      }   \n    }\n  }, [tsecs]);\n\n\n  ////////////////////////////////////////////////////////\n  //       Initialize Component                         //\n  //////////////////////////////////////////////////////// \n\n  // Initialize Component State\n  const mapContainer = useRef();\n  const [tsecs, setTsecs] = useState(0);\n  const [technicianData, setTechnicianData] = useState({});\n  const [markers, setMarkers] = useState({});\n  const [map, setMap] = useState(null);\n  const [closeTechnicianPairs, setCloseTechnicianPairs] = useState(new Set());\n\n  toast.configure();\n\n  fetchTechnicianLocation();\n\n  return (\n    <div>\n      <div className=\"map-container\" ref={mapContainer} />\n    </div>\n  );\n};\n\nReactDOM.render(<Map />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}