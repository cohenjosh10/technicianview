{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jhcohen/Desktop/technicianview/frontend/src/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nvar TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nvar GREENTOWN_LABS_LNG = -71.102768;\nvar GREENTOWN_LABS_LAT = 42.381729;\nvar MOCK_DATA_START_TIME = 1592078400;\nvar APPLICATION_START_TIME = new Date().getTime(); // TODO: cleanup\n\nvar fetchScheduled = false;\nvar globalTechDict = {};\n\nvar getMockedTime = function getMockedTime() {\n  return MOCK_DATA_START_TIME; //return MOCK_DATA_START_TIME + (new Date().getTime() - APPLICATION_START_TIME) * 20;\n};\n\nvar Map = function Map() {\n  _s();\n\n  var mapContainer = useRef();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tsecs = _useState2[0],\n      setTsecs = _useState2[1]; // Technician Fetching\n\n\n  var fetchTechnicianLocation = function fetchTechnicianLocation() {\n    console.log('fetchTEchnicianLocation');\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var tsecs;\n\n      var _iterator = _createForOfIteratorHelper(json.features),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tech = _step.value;\n          var name = tech.properties.name;\n\n          if (globalTechDict[name] == null) {\n            tech.properties.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n            globalTechDict[name] = tech;\n          } else {\n            tech.properties.color = globalTechDict[name].properties.color;\n            globalTechDict[name] = tech;\n          }\n\n          tsecs = tech.properties.tsecs;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      setTsecs(tsecs);\n      scheduleTechnicianFetch();\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  var scheduleTechnicianFetch = function scheduleTechnicianFetch() {\n    /*if (!fetchScheduled) {\n      fetchScheduled = true;*/\n    setTimeout(function () {\n      fetchScheduled = false;\n      fetchTechnicianLocation();\n    }, 3000); //}\n  };\n\n  fetchTechnicianLocation();\n  useEffect(function () {\n    var techs = Object.values(globalTechDict); // Set screen center to the average of the existing technicians. If no\n    // technicians are provided, set screen center to the Greentown Labs\n\n    var latSum = 0;\n    var lngSum = 0;\n\n    for (var _i = 0, _techs = techs; _i < _techs.length; _i++) {\n      var tech = _techs[_i];\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n\n    var centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    var centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT;\n    var map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [centerLng, centerLat],\n      zoom: 12\n    });\n\n    for (var _i2 = 0, _techs2 = techs; _i2 < _techs2.length; _i2++) {\n      var _tech = _techs2[_i2];\n      var marker = new mapboxgl.Marker({\n        color: _tech.properties.color\n      }).setLngLat([_tech.geometry.coordinates[0], _tech.geometry.coordinates[1]]).setPopup(new mapboxgl.Popup().setText(_tech.properties.name)).setRotation(_tech.properties.bearing).addTo(map);\n    }\n  }, [tsecs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Map, \"L6nhg6Zu0JCWs25lkATZIy+QD/Y=\");\n\n_c = Map;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 106,\n  columnNumber: 17\n}, this), document.getElementById('app'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jhcohen/Desktop/technicianview/frontend/src/index.js"],"names":["React","useRef","useEffect","useState","ReactDOM","mapboxgl","MapboxWorker","workerClass","accessToken","TECHNICIANS_API","GREENTOWN_LABS_LNG","GREENTOWN_LABS_LAT","MOCK_DATA_START_TIME","APPLICATION_START_TIME","Date","getTime","fetchScheduled","globalTechDict","getMockedTime","Map","mapContainer","tsecs","setTsecs","fetchTechnicianLocation","console","log","mockedTime","fetch","then","response","json","features","tech","name","properties","color","Math","floor","random","toString","scheduleTechnicianFetch","catch","error","setTimeout","techs","Object","values","latSum","lngSum","geometry","coordinates","centerLng","length","centerLat","map","container","current","style","center","zoom","marker","Marker","setLngLat","setPopup","Popup","setText","setRotation","bearing","addTo","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\n\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nconst TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nconst GREENTOWN_LABS_LNG = -71.102768;\nconst GREENTOWN_LABS_LAT = 42.381729;\nconst MOCK_DATA_START_TIME = 1592078400;\nconst APPLICATION_START_TIME = new Date().getTime();\n\n// TODO: cleanup\nvar fetchScheduled = false;\n\nconst globalTechDict = {};\n\nconst getMockedTime = () => {\n  return MOCK_DATA_START_TIME;\n  //return MOCK_DATA_START_TIME + (new Date().getTime() - APPLICATION_START_TIME) * 20;\n}\n\nconst Map = () => {\n  const mapContainer = useRef();\n  const [tsecs, setTsecs] = useState(0);\n\n  // Technician Fetching\n  const fetchTechnicianLocation = () => {\n    console.log('fetchTEchnicianLocation');\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime)\n      .then((response) => response.json())\n      .then((json) => {\n        var tsecs;\n        for (const tech of json.features) {\n          const name = tech.properties.name;\n          if (globalTechDict[name] == null) {\n            tech.properties.color = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n            globalTechDict[name] = tech;\n          } else {\n            tech.properties.color = globalTechDict[name].properties.color;\n            globalTechDict[name] = tech;\n          }\n          tsecs = tech.properties.tsecs;\n        }\n        setTsecs(tsecs);\n        scheduleTechnicianFetch();\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    };\n\n  const scheduleTechnicianFetch = () => {\n    /*if (!fetchScheduled) {\n      fetchScheduled = true;*/\n      setTimeout(() => {\n        fetchScheduled = false;\n        fetchTechnicianLocation();\n      }, 3000);\n    //}\n  }\n\n  fetchTechnicianLocation();\n\n\n  useEffect(() => {\n    const techs = Object.values(globalTechDict);\n\n    // Set screen center to the average of the existing technicians. If no\n    // technicians are provided, set screen center to the Greentown Labs\n    var latSum = 0;\n    var lngSum = 0;\n    for (const tech of techs) {\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n    const centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    const centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT;\n\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [centerLng, centerLat],\n      zoom: 12\n    });\n\n    for (const tech of techs) {\n      const marker = new mapboxgl.Marker({color: tech.properties.color})\n        .setLngLat([tech.geometry.coordinates[0], tech.geometry.coordinates[1]])\n        .setPopup(new mapboxgl.Popup().setText(tech.properties.name))\n        .setRotation(tech.properties.bearing)\n        .addTo(map);\n    }\n  }, [tsecs]);\n\n  return (\n    <div>\n      <div className=\"map-container\" ref={mapContainer} />\n    </div>\n  );\n};\n\nReactDOM.render(<Map />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}