{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/jhcohen/Desktop/technicianview/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jhcohen/Desktop/technicianview/frontend/src/index.js\",\n    _arguments = arguments,\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nvar TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nvar GREENTOWN_LABS_LNG = -71.102768;\nvar GREENTOWN_LABS_LAT = 42.381729;\nvar SERVER_REFRESH_MS = 1000;\nvar CLOSE_PROXIMITY_KM = .3048;\nvar APPLICATION_START_TIME_MS = new Date().getTime();\nvar MOCK_DATA_START_TIME_S = 1592078400;\nvar MOCK_DATA_SIMULATION_SPEED = 20;\nvar MS_IN_S = 1000;\nvar mTechnicianData = {};\nvar mMarkers = {};\nvar mMap;\ntoast.configure();\n\nvar getMockedTime = function getMockedTime() {\n  return MOCK_DATA_START_TIME_S + Math.round((new Date().getTime() - APPLICATION_START_TIME_MS) / MS_IN_S) * MOCK_DATA_SIMULATION_SPEED;\n};\n\nvar Map = function Map() {\n  _s();\n\n  var mapContainer = useRef();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tsecs = _useState2[0],\n      setTsecs = _useState2[1]; // Technician Fetching\n\n\n  var fetchTechnicianLocation = function fetchTechnicianLocation() {\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      parseTechnicianData(json);\n      notifyIfTechniciansAreClose();\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  var parseTechnicianData = function parseTechnicianData(json) {\n    var tsecs;\n\n    var _iterator = _createForOfIteratorHelper(json.features),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var tech = _step.value;\n        var name = tech.properties.name;\n\n        if (mTechnicianData[name] == null) {\n          tech.properties.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n          mTechnicianData[name] = tech;\n        } else {\n          tech.properties.color = mTechnicianData[name].properties.color;\n          mTechnicianData[name] = tech;\n        }\n\n        tsecs = tech.properties.tsecs;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    setTsecs(tsecs);\n    scheduleTechnicianFetch();\n  };\n\n  var scheduleTechnicianFetch = function scheduleTechnicianFetch() {\n    setTimeout(function () {\n      fetchTechnicianLocation();\n    }, SERVER_REFRESH_MS);\n  };\n\n  var notifyIfTechniciansAreClose = function notifyIfTechniciansAreClose() {\n    var technicianPairs = generateTechnicianPairs();\n\n    var _iterator2 = _createForOfIteratorHelper(technicianPairs),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        technicianPair = _step2.value;\n        technicianOne = technicianPair[0];\n        technicianTwo = technicianPair[1];\n\n        if (haversineDistance(technicianOne.geometry.coordinates, technicianTwo.geometry.coordinates) > CLOSE_PROMIXIMITY_KM) {\n          toast('[ALERT] ' + technicianOne.properties.name + ' is within 1000 feet of ' + technicianTwo.properties.name + '!');\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n\n  var generateTechnicianPairs = function generateTechnicianPairs() {\n    var technicians = Object.getValues(mTechnicianData);\n    var technicianPairs = [];\n\n    for (var i = 0; i < technicians.length; i++) {\n      for (var j = i + 1; j < technicians.length; j++) {\n        technicianPairs.push([technicians[i], technicians[j]]);\n      }\n    }\n\n    return technicianPairs;\n  };\n\n  var haversine = function haversine() {\n    var radians = Array.prototype.map.call(_arguments, function (deg) {\n      return deg / 180.0 * Math.PI;\n    });\n    var lat1 = radians[0],\n        lon1 = radians[1],\n        lat2 = radians[2],\n        lon2 = radians[3];\n    var R = 6372.8; // km\n\n    var dLat = lat2 - lat1;\n    var dLon = lon2 - lon1;\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    console.log('haversine: ' + R * c);\n    return R * c;\n  };\n\n  fetchTechnicianLocation();\n  useEffect(function () {\n    var techs = Object.values(mTechnicianData); // Calculate a screen center to be the average of the existing technicians. \n    // If no technicians are provided, set screen center to the Greentown Labs\n\n    var latSum = 0;\n    var lngSum = 0;\n\n    for (var _i = 0, _techs = techs; _i < _techs.length; _i++) {\n      var tech = _techs[_i];\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n\n    var centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    var centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT; // Render the map\n\n    if (mMap == null) {\n      mMap = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [centerLng, centerLat],\n        zoom: 12\n      });\n    } else {\n      mMap.setCenter([centerLng, centerLat]);\n    } // Render the map markers\n\n\n    for (var _i2 = 0, _techs2 = techs; _i2 < _techs2.length; _i2++) {\n      var _tech = _techs2[_i2];\n      var name = _tech.properties.name;\n\n      if (mMarkers[name] == null) {\n        mMarkers[name] = new mapboxgl.Marker({\n          color: _tech.properties.color\n        }).setLngLat([_tech.geometry.coordinates[0], _tech.geometry.coordinates[1]]).setPopup(new mapboxgl.Popup().setText(_tech.properties.name)).setRotation(_tech.properties.bearing).addTo(mMap);\n      } else {\n        mMarkers[name].setLngLat([_tech.geometry.coordinates[0], _tech.geometry.coordinates[1]]).setPopup(new mapboxgl.Popup().setText(_tech.properties.name)).setRotation(_tech.properties.bearing).addTo(mMap);\n      }\n    }\n  }, [tsecs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Map, \"L6nhg6Zu0JCWs25lkATZIy+QD/Y=\");\n\n_c = Map;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 163,\n  columnNumber: 17\n}, this), document.getElementById('app'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jhcohen/Desktop/technicianview/frontend/src/index.js"],"names":["React","useRef","useEffect","useState","ReactDOM","toast","mapboxgl","MapboxWorker","workerClass","accessToken","TECHNICIANS_API","GREENTOWN_LABS_LNG","GREENTOWN_LABS_LAT","SERVER_REFRESH_MS","CLOSE_PROXIMITY_KM","APPLICATION_START_TIME_MS","Date","getTime","MOCK_DATA_START_TIME_S","MOCK_DATA_SIMULATION_SPEED","MS_IN_S","mTechnicianData","mMarkers","mMap","configure","getMockedTime","Math","round","Map","mapContainer","tsecs","setTsecs","fetchTechnicianLocation","mockedTime","fetch","then","response","json","parseTechnicianData","notifyIfTechniciansAreClose","catch","error","console","features","tech","name","properties","color","floor","random","toString","scheduleTechnicianFetch","setTimeout","technicianPairs","generateTechnicianPairs","technicianPair","technicianOne","technicianTwo","haversineDistance","geometry","coordinates","CLOSE_PROMIXIMITY_KM","technicians","Object","getValues","i","length","j","push","haversine","radians","Array","prototype","map","call","arguments","deg","PI","lat1","lon1","lat2","lon2","R","dLat","dLon","a","sin","cos","c","asin","sqrt","log","techs","values","latSum","lngSum","centerLng","centerLat","container","current","style","center","zoom","setCenter","Marker","setLngLat","setPopup","Popup","setText","setRotation","bearing","addTo","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\n\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = 'pk.eyJ1IjoiY29oZW5qb3NoMTAiLCJhIjoiY2tvODM3cHViMWh5MDJ3bWxlODR5OHJwbyJ9.OsP4XQxhznEl3LkexbZyNg';\nconst TECHNICIANS_API = 'http://127.0.0.1:5000/api/v1/solar_farms/abc123/technicians';\nconst GREENTOWN_LABS_LNG = -71.102768;\nconst GREENTOWN_LABS_LAT = 42.381729;\nconst SERVER_REFRESH_MS = 1000;\nconst CLOSE_PROXIMITY_KM = .3048\n\nconst APPLICATION_START_TIME_MS = new Date().getTime();\nconst MOCK_DATA_START_TIME_S = 1592078400;\nconst MOCK_DATA_SIMULATION_SPEED = 20;\nconst MS_IN_S = 1000;\n\nconst mTechnicianData = {};\nconst mMarkers = {};\nvar mMap;\n\ntoast.configure();\n\nconst getMockedTime = () => {\n  return MOCK_DATA_START_TIME_S + Math.round((new Date().getTime() - APPLICATION_START_TIME_MS) / MS_IN_S) * MOCK_DATA_SIMULATION_SPEED;\n}\n\nconst Map = () => {\n  const mapContainer = useRef();\n  const [tsecs, setTsecs] = useState(0);\n\n  // Technician Fetching\n  const fetchTechnicianLocation = () => {\n    var mockedTime = getMockedTime();\n    return fetch(TECHNICIANS_API + \"/\" + mockedTime)\n      .then((response) => response.json())\n      .then((json) => {\n        parseTechnicianData(json);\n        notifyIfTechniciansAreClose();\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    };\n\n  const parseTechnicianData = (json) => {\n    var tsecs;\n    for (const tech of json.features) {\n      const name = tech.properties.name;\n      if (mTechnicianData[name] == null) {\n        tech.properties.color = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n        mTechnicianData[name] = tech;\n      } else {\n        tech.properties.color = mTechnicianData[name].properties.color;\n        mTechnicianData[name] = tech;\n      }\n      tsecs = tech.properties.tsecs;\n    }\n    setTsecs(tsecs);\n    scheduleTechnicianFetch();\n  }\n\n  const scheduleTechnicianFetch = () => {\n    setTimeout(() => {\n      fetchTechnicianLocation();\n    }, SERVER_REFRESH_MS);\n  }\n\n  const notifyIfTechniciansAreClose = () => {\n    const technicianPairs = generateTechnicianPairs();\n    for (technicianPair of technicianPairs) {\n      technicianOne = technicianPair[0];\n      technicianTwo = technicianPair[1];\n      if (haversineDistance(technicianOne.geometry.coordinates, technicianTwo.geometry.coordinates)\n          > CLOSE_PROMIXIMITY_KM) {\n        toast('[ALERT] ' + technicianOne.properties.name + ' is within 1000 feet of ' + technicianTwo.properties.name + '!');\n      }\n    }\n  }\n\n  const generateTechnicianPairs = () => {\n    const technicians = Object.getValues(mTechnicianData);\n    const technicianPairs = [];\n    for (var i = 0; i < technicians.length; i++) {\n      for (var j = i+1; j < technicians.length; j++) {\n        technicianPairs.push([technicians[i], technicians[j]]);\n      }\n    }\n    return technicianPairs;\n  }\n\n  const haversine = () => {\n    var radians = Array.prototype.map.call(arguments, function(deg) { return deg/180.0 * Math.PI; });\n    var lat1 = radians[0], lon1 = radians[1], lat2 = radians[2], lon2 = radians[3];\n    var R = 6372.8; // km\n    var dLat = lat2 - lat1;\n    var dLon = lon2 - lon1;\n    var a = Math.sin(dLat / 2) * Math.sin(dLat /2) + Math.sin(dLon / 2) * Math.sin(dLon /2) * Math.cos(lat1) * Math.cos(lat2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    console.log('haversine: ' + R*c);\n    return R * c;\n  }\n\n  fetchTechnicianLocation();\n\n\n  useEffect(() => {\n    const techs = Object.values(mTechnicianData);\n\n    // Calculate a screen center to be the average of the existing technicians. \n    // If no technicians are provided, set screen center to the Greentown Labs\n    var latSum = 0;\n    var lngSum = 0;\n    for (const tech of techs) {\n      lngSum += tech.geometry.coordinates[0];\n      latSum += tech.geometry.coordinates[1];\n    }\n    const centerLng = techs.length > 0 ? lngSum / techs.length : GREENTOWN_LABS_LNG;\n    const centerLat = techs.length > 0 ? latSum / techs.length : GREENTOWN_LABS_LAT;\n\n    // Render the map\n    if (mMap == null) {\n      mMap = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [centerLng, centerLat],\n        zoom: 12\n      });\n    } else {\n      mMap.setCenter([centerLng, centerLat]);\n    }\n\n    // Render the map markers\n    for (const tech of techs) {\n      var name = tech.properties.name;\n      if (mMarkers[name] == null) {\n        mMarkers[name] = new mapboxgl.Marker({color: tech.properties.color})\n          .setLngLat([tech.geometry.coordinates[0], tech.geometry.coordinates[1]])\n          .setPopup(new mapboxgl.Popup().setText(tech.properties.name))\n          .setRotation(tech.properties.bearing)\n          .addTo(mMap);\n      } else {\n        mMarkers[name]\n          .setLngLat([tech.geometry.coordinates[0], tech.geometry.coordinates[1]])\n          .setPopup(new mapboxgl.Popup().setText(tech.properties.name))\n          .setRotation(tech.properties.bearing)\n          .addTo(mMap);\n      }   \n    }\n  }, [tsecs]);\n\n  return (\n    <div>\n      <div className=\"map-container\" ref={mapContainer} />\n    </div>\n  );\n};\n\nReactDOM.render(<Map />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}